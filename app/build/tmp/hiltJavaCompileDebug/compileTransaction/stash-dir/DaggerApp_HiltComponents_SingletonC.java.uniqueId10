// Generated by Dagger (https://dagger.dev).
package com.example.challenge;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.challenge.data.common.HandleResponse;
import com.example.challenge.data.service.connection.ConnectionsService;
import com.example.challenge.data.service.log_in.LogInService;
import com.example.challenge.di.AppModule_ProvideConnectionsServiceFactory;
import com.example.challenge.di.AppModule_ProvideHandleResponseFactory;
import com.example.challenge.di.AppModule_ProvideLogInServiceFactory;
import com.example.challenge.di.AppModule_ProvideLoggingInterceptorFactory;
import com.example.challenge.di.AppModule_ProvideOkHttpClientFactory;
import com.example.challenge.di.AppModule_ProvideRetrofitClientFactory;
import com.example.challenge.di.DataStoreModule_ProvideAuthTokenFactory;
import com.example.challenge.di.DataStoreModule_ProvideDataSoreFactory;
import com.example.challenge.di.RepositoryModule_ProvideConnectionsRepositoryFactory;
import com.example.challenge.di.RepositoryModule_ProvideDataStoreRepositoryFactory;
import com.example.challenge.di.RepositoryModule_ProvideLogInRepositoryFactory;
import com.example.challenge.di.UseCaseModule_ProvideClearDataStoreUseCaseFactory;
import com.example.challenge.di.UseCaseModule_ProvideEmailValidatorUseCaseFactory;
import com.example.challenge.di.UseCaseModule_ProvideGetConnectionsUseCaseFactory;
import com.example.challenge.di.UseCaseModule_ProvideGetTokenUseCaseFactory;
import com.example.challenge.di.UseCaseModule_ProvideLogInUseCaseFactory;
import com.example.challenge.di.UseCaseModule_ProvidePasswordValidatorUseCaseFactory;
import com.example.challenge.di.UseCaseModule_ProvideSaveTokenUseCaseFactory;
import com.example.challenge.domain.repository.connection.ConnectionsRepository;
import com.example.challenge.domain.repository.datastore.DataStoreRepository;
import com.example.challenge.domain.repository.log_in.LogInRepository;
import com.example.challenge.domain.usecase.connection.GetConnectionsUseCase;
import com.example.challenge.domain.usecase.datastore.ClearDataStoreUseCase;
import com.example.challenge.domain.usecase.datastore.GetTokenUseCase;
import com.example.challenge.domain.usecase.datastore.SaveTokenUseCase;
import com.example.challenge.domain.usecase.log_in.LogInUseCase;
import com.example.challenge.domain.usecase.validator.EmailValidatorUseCase;
import com.example.challenge.domain.usecase.validator.PasswordValidatorUseCase;
import com.example.challenge.presentation.MainActivity;
import com.example.challenge.presentation.screen.connection.ConnectionsFragment;
import com.example.challenge.presentation.screen.connection.ConnectionsViewModel;
import com.example.challenge.presentation.screen.connection.ConnectionsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.challenge.presentation.screen.log_in.LogInFragment;
import com.example.challenge.presentation.screen.log_in.LogInViewModel;
import com.example.challenge.presentation.screen.log_in.LogInViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.challenge.presentation.screen.splash.SplashFragment;
import com.example.challenge.presentation.screen.splash.SplashViewModel;
import com.example.challenge.presentation.screen.splash.SplashViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.managers.SavedStateHandleHolder;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import kotlinx.coroutines.flow.Flow;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerApp_HiltComponents_SingletonC {
  private DaggerApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private SavedStateHandleHolder savedStateHandleHolder;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ActivityRetainedCBuilder savedStateHandleHolder(
        SavedStateHandleHolder savedStateHandleHolder) {
      this.savedStateHandleHolder = Preconditions.checkNotNull(savedStateHandleHolder);
      return this;
    }

    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      Preconditions.checkBuilderRequirement(savedStateHandleHolder, SavedStateHandleHolder.class);
      return new ActivityRetainedCImpl(singletonCImpl, savedStateHandleHolder);
    }
  }

  private static final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public App_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public App_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public App_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends App_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends App_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectConnectionsFragment(ConnectionsFragment arg0) {
    }

    @Override
    public void injectLogInFragment(LogInFragment arg0) {
    }

    @Override
    public void injectSplashFragment(SplashFragment arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends App_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends App_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(3).add(ConnectionsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LogInViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SplashViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<ConnectionsViewModel> connectionsViewModelProvider;

    private Provider<LogInViewModel> logInViewModelProvider;

    private Provider<SplashViewModel> splashViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.connectionsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.logInViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.splashViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
    }

    @Override
    public Map<String, javax.inject.Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, javax.inject.Provider<ViewModel>>newMapBuilder(3).put("com.example.challenge.presentation.screen.connection.ConnectionsViewModel", ((Provider) connectionsViewModelProvider)).put("com.example.challenge.presentation.screen.log_in.LogInViewModel", ((Provider) logInViewModelProvider)).put("com.example.challenge.presentation.screen.splash.SplashViewModel", ((Provider) splashViewModelProvider)).build();
    }

    @Override
    public Map<String, Object> getHiltViewModelAssistedMap() {
      return Collections.<String, Object>emptyMap();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.challenge.presentation.screen.connection.ConnectionsViewModel 
          return (T) new ConnectionsViewModel(singletonCImpl.provideGetConnectionsUseCaseProvider.get(), singletonCImpl.provideClearDataStoreUseCaseProvider.get());

          case 1: // com.example.challenge.presentation.screen.log_in.LogInViewModel 
          return (T) new LogInViewModel(singletonCImpl.provideLogInUseCaseProvider.get(), singletonCImpl.provideSaveTokenUseCaseProvider.get(), singletonCImpl.provideEmailValidatorUseCaseProvider.get(), singletonCImpl.providePasswordValidatorUseCaseProvider.get());

          case 2: // com.example.challenge.presentation.screen.splash.SplashViewModel 
          return (T) new SplashViewModel(singletonCImpl.provideGetTokenUseCaseProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl,
        SavedStateHandleHolder savedStateHandleHolderParam) {
      this.singletonCImpl = singletonCImpl;

      initialize(savedStateHandleHolderParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandleHolder savedStateHandleHolderParam) {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends App_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<DataStore<Preferences>> provideDataSoreProvider;

    private Provider<Flow<String>> provideAuthTokenProvider;

    private Provider<HttpLoggingInterceptor> provideLoggingInterceptorProvider;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<Retrofit> provideRetrofitClientProvider;

    private Provider<ConnectionsService> provideConnectionsServiceProvider;

    private Provider<HandleResponse> provideHandleResponseProvider;

    private Provider<ConnectionsRepository> provideConnectionsRepositoryProvider;

    private Provider<GetConnectionsUseCase> provideGetConnectionsUseCaseProvider;

    private Provider<DataStoreRepository> provideDataStoreRepositoryProvider;

    private Provider<ClearDataStoreUseCase> provideClearDataStoreUseCaseProvider;

    private Provider<LogInService> provideLogInServiceProvider;

    private Provider<LogInRepository> provideLogInRepositoryProvider;

    private Provider<LogInUseCase> provideLogInUseCaseProvider;

    private Provider<SaveTokenUseCase> provideSaveTokenUseCaseProvider;

    private Provider<EmailValidatorUseCase> provideEmailValidatorUseCaseProvider;

    private Provider<PasswordValidatorUseCase> providePasswordValidatorUseCaseProvider;

    private Provider<GetTokenUseCase> provideGetTokenUseCaseProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.provideDataSoreProvider = DoubleCheck.provider(new SwitchingProvider<DataStore<Preferences>>(singletonCImpl, 6));
      this.provideAuthTokenProvider = DoubleCheck.provider(new SwitchingProvider<Flow<String>>(singletonCImpl, 5));
      this.provideLoggingInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<HttpLoggingInterceptor>(singletonCImpl, 7));
      this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonCImpl, 4));
      this.provideRetrofitClientProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 3));
      this.provideConnectionsServiceProvider = DoubleCheck.provider(new SwitchingProvider<ConnectionsService>(singletonCImpl, 2));
      this.provideHandleResponseProvider = DoubleCheck.provider(new SwitchingProvider<HandleResponse>(singletonCImpl, 8));
      this.provideConnectionsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ConnectionsRepository>(singletonCImpl, 1));
      this.provideGetConnectionsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetConnectionsUseCase>(singletonCImpl, 0));
      this.provideDataStoreRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<DataStoreRepository>(singletonCImpl, 10));
      this.provideClearDataStoreUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<ClearDataStoreUseCase>(singletonCImpl, 9));
      this.provideLogInServiceProvider = DoubleCheck.provider(new SwitchingProvider<LogInService>(singletonCImpl, 13));
      this.provideLogInRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<LogInRepository>(singletonCImpl, 12));
      this.provideLogInUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<LogInUseCase>(singletonCImpl, 11));
      this.provideSaveTokenUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<SaveTokenUseCase>(singletonCImpl, 14));
      this.provideEmailValidatorUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<EmailValidatorUseCase>(singletonCImpl, 15));
      this.providePasswordValidatorUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<PasswordValidatorUseCase>(singletonCImpl, 16));
      this.provideGetTokenUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetTokenUseCase>(singletonCImpl, 17));
    }

    @Override
    public void injectApp(App app) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.challenge.domain.usecase.connection.GetConnectionsUseCase 
          return (T) UseCaseModule_ProvideGetConnectionsUseCaseFactory.provideGetConnectionsUseCase(singletonCImpl.provideConnectionsRepositoryProvider.get());

          case 1: // com.example.challenge.domain.repository.connection.ConnectionsRepository 
          return (T) RepositoryModule_ProvideConnectionsRepositoryFactory.provideConnectionsRepository(singletonCImpl.provideConnectionsServiceProvider.get(), singletonCImpl.provideHandleResponseProvider.get());

          case 2: // com.example.challenge.data.service.connection.ConnectionsService 
          return (T) AppModule_ProvideConnectionsServiceFactory.provideConnectionsService(singletonCImpl.provideRetrofitClientProvider.get());

          case 3: // retrofit2.Retrofit 
          return (T) AppModule_ProvideRetrofitClientFactory.provideRetrofitClient(singletonCImpl.provideOkHttpClientProvider.get());

          case 4: // okhttp3.OkHttpClient 
          return (T) AppModule_ProvideOkHttpClientFactory.provideOkHttpClient(singletonCImpl.provideAuthTokenProvider.get(), singletonCImpl.provideLoggingInterceptorProvider.get());

          case 5: // kotlinx.coroutines.flow.Flow<java.lang.String> 
          return (T) DataStoreModule_ProvideAuthTokenFactory.provideAuthToken(singletonCImpl.provideDataSoreProvider.get());

          case 6: // androidx.datastore.core.DataStore<androidx.datastore.preferences.core.Preferences> 
          return (T) DataStoreModule_ProvideDataSoreFactory.provideDataSore(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 7: // okhttp3.logging.HttpLoggingInterceptor 
          return (T) AppModule_ProvideLoggingInterceptorFactory.provideLoggingInterceptor();

          case 8: // com.example.challenge.data.common.HandleResponse 
          return (T) AppModule_ProvideHandleResponseFactory.provideHandleResponse();

          case 9: // com.example.challenge.domain.usecase.datastore.ClearDataStoreUseCase 
          return (T) UseCaseModule_ProvideClearDataStoreUseCaseFactory.provideClearDataStoreUseCase(singletonCImpl.provideDataStoreRepositoryProvider.get());

          case 10: // com.example.challenge.domain.repository.datastore.DataStoreRepository 
          return (T) RepositoryModule_ProvideDataStoreRepositoryFactory.provideDataStoreRepository(singletonCImpl.provideDataSoreProvider.get());

          case 11: // com.example.challenge.domain.usecase.log_in.LogInUseCase 
          return (T) UseCaseModule_ProvideLogInUseCaseFactory.provideLogInUseCase(singletonCImpl.provideLogInRepositoryProvider.get());

          case 12: // com.example.challenge.domain.repository.log_in.LogInRepository 
          return (T) RepositoryModule_ProvideLogInRepositoryFactory.provideLogInRepository(singletonCImpl.provideLogInServiceProvider.get(), singletonCImpl.provideHandleResponseProvider.get());

          case 13: // com.example.challenge.data.service.log_in.LogInService 
          return (T) AppModule_ProvideLogInServiceFactory.provideLogInService(singletonCImpl.provideRetrofitClientProvider.get());

          case 14: // com.example.challenge.domain.usecase.datastore.SaveTokenUseCase 
          return (T) UseCaseModule_ProvideSaveTokenUseCaseFactory.provideSaveTokenUseCase(singletonCImpl.provideDataStoreRepositoryProvider.get());

          case 15: // com.example.challenge.domain.usecase.validator.EmailValidatorUseCase 
          return (T) UseCaseModule_ProvideEmailValidatorUseCaseFactory.provideEmailValidatorUseCase();

          case 16: // com.example.challenge.domain.usecase.validator.PasswordValidatorUseCase 
          return (T) UseCaseModule_ProvidePasswordValidatorUseCaseFactory.providePasswordValidatorUseCase();

          case 17: // com.example.challenge.domain.usecase.datastore.GetTokenUseCase 
          return (T) UseCaseModule_ProvideGetTokenUseCaseFactory.provideGetTokenUseCase(singletonCImpl.provideDataStoreRepositoryProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
